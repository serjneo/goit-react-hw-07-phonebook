{"version":3,"sources":["redux/contactsApi.js","redux/store.js","components/Container/Container.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","createContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","store","configureStore","reducer","middleware","getDefaultMiddleware","Container","children","className","ContactForm","contacts","data","onSubmit","e","preventDefault","name","currentTarget","value","phone","find","contact","toLowerCase","checkRepeatName","checkRepeatPhone","reset","toast","info","autoClose","type","pattern","title","required","Filter","onChange","placeholder","ContactList","map","onClick","id","App","useState","filter","setFilter","includes","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cbde43e.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://619f9ec91ac52a0017ba496f.mockapi.io/api/v1',\n  }),\n  tagTypes: ['Contact'],\n  endpoints: builder => ({\n    fetchContacts: builder.query({\n      query: () => '/contacts',\n      providesTags: ['Contact'],\n    }),\n    createContact: builder.mutation({\n      query: newContact => ({\n        url: '/contacts',\n        method: 'POST',\n        body: newContact,\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n    deleteContact: builder.mutation({\n      query: contactId => ({\n        url: `/contacts/${contactId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useCreateContactMutation,\n} = contactsApi;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { contactsApi } from './contactsApi';\n\nexport const store = configureStore({\n  reducer: {\n    [contactsApi.reducerPath]: contactsApi.reducer,\n  },\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware(),\n    contactsApi.middleware,\n  ],\n});\n","const Container = ({ children }) => {\n  return <div className=\"container\">{children}</div>;\n};\n\nexport default Container;\n","import {\n  useFetchContactsQuery,\n  useCreateContactMutation,\n} from '../../redux/contactsApi';\nimport { toast } from 'react-toastify';\nimport './ContactForm.scss';\n\nfunction ContactForm() {\n  const { data: contacts } = useFetchContactsQuery();\n  const [createContact] = useCreateContactMutation();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const name = e.currentTarget.name.value;\n    const phone = e.currentTarget.phone.value;\n    const newContact = {\n      name,\n      phone,\n    };\n    const checkRepeatName = name => {\n      return contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      );\n    };\n    const checkRepeatPhone = phone => {\n      return contacts.find(contact => contact.phone === phone);\n    };\n    if (checkRepeatName(name)) {\n      toast.info(`'${name}' is already in use!`, {\n        autoClose: 2500,\n      });\n    } else if (checkRepeatPhone(phone)) {\n      toast.info(`🤔 ${phone} is already in use`, {\n        autoClose: 2500,\n      });\n    } else {\n      e.currentTarget.reset();\n    }\n    createContact(newContact);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <label>\n        <p className=\"title\">Name:</p>\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        <p className=\"title\">Phone:</p>\n        <input\n          className=\"input\"\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className=\"button\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import './Filter.scss';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <input\n      className=\"input\"\n      type=\"text\"\n      name=\"filter\"\n      onChange={onChange}\n      value={value}\n      placeholder=\"search contact\"\n    ></input>\n  );\n}\n\nexport default Filter;\n","import { useDeleteContactMutation } from '../../redux/contactsApi';\nimport './ContactList.scss';\n\nfunction ContactList({ contacts }) {\n  const [deleteContact] = useDeleteContactMutation();\n  return (\n    <ul className=\"list\">\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          <p className=\"title\">Name: {contact.name}</p>\n          <p className=\"title\">Number: {contact.phone}</p>\n          <button\n            className=\"button\"\n            onClick={() => deleteContact(contact.id)}\n            type=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import { useState } from 'react';\nimport { useFetchContactsQuery } from './redux/contactsApi';\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nfunction App() {\n  const { data: contacts } = useFetchContactsQuery();\n\n  const [filter, setFilter] = useState('');\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const filteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase()),\n    );\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm contacts={contacts} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      {contacts && <ContactList contacts={filteredContacts()} />}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './App.js';\nimport './index.scss';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}